---
title: Kom igång
slug: getting-started
date: 0002/01/01
number: 2
contents: Installera Meteor & Meteorite.|Lära dig om de 5 typerna av Meteor paket.|Sätta upp en filstruktur för din Meteor applikation.
paragraphs: 49
---

Första intrycket är viktigt, och Meteors installationsprocess borde vara relativt smärtfri. I de flesta fall kommer du vara igång på mindre än fem minuter.

Till att börja med kan vi installera Meteor genom att öppna ett terminalfönster och skriva:

~~~bash
$ curl https://install.meteor.com | sh
~~~

Detta kommer att installera programfilen `meteor` på ditt system och göra dig redo att använda Meteor.

<% note do %>

### Hur man *undviker* att installera Meteor

Om du inte kan (eller inte vill) installera Meteor lokalt, så rekommenderar vi starkt att kolla in [Nitrous.io](http://nitrous.io).

Nitrous.io är en tjänst som låter dig köra applikationer och redigera dom direkt i din webbläsare. Vi har skrivit [en kort guide](https://www.discovermeteor.com/blog/meteor-nitrous) för att hjälpa dig att sätta upp detta.

Du kan enkelt följa den guiden upp till (och inklusive) sektionen "Installing Meteor & Meteorite", sedan kan du följa med boken igen med början från avsnittet "Skapa en enkel applikation" i detta kapitel.

<% end %>

### Meteorite

Eftersom Meteor inte stödjer tredjeparts-paket direkt "out of the box", så har Tom Coleman (en av denna bokens författare) som medlem i communityt skapat [Meteorite](http://oortcloud.github.com/meteorite/), en "wrapper" för Meteor. Meteorite tar alltså också hand om installationen av Meteor för dig och kopplar ihop det med varje paket du stöter på.

Då vi kommer bero på tredjeparts-paket för några av Microscopes egenskaper, låt oss installera Meteorite.

### Installera Meteorite

Du kommer behöva säkerställa att Node och Git är installerat på din maskin. Installera dem på standardsättet för ditt operativsystem, eller prova någon av dessa länkar:

- [Ladda ner Node här](http://nodejs.org/download/)
- [Ladda ner Git här](http://git-scm.com/downloads)

Nu kan vi installera Meteorite. Då det är ett [npm](https://npmjs.org/)-paket (en Node-paketerad modul, Nodes standard modulformat) så installerar vi det med:

~~~bash
$ npm install -g meteorite
~~~

<% note do %>

### Problem med rättigheter?

På vissa maskiner kommer du kanske behöva root-rättigheter för att installera Meteorite. För att undvika problem, försäkra dig om du använder `sudo -H`:

~~~bash
$ sudo -H npm install -g meteorite
~~~

Du kan läsa mer om detta problem i [Meteorite-dokumentationen](https://github.com/oortcloud/meteorite/blob/master/README.md#permission-woes).

<% end %>

Det var det! Meteorite kommer hantera saker från och med nu.

OBS! Notera att det inte finns stöd för Meteorite i Windows ännu, men du kan ta en titt på [vår windows-guide](https://www.discovermeteor.com/blog/using-meteor-and-atmopshere-on-windows/) istället.

<% note do %>

### `mrt` vs `meteor`

Med Meteorite installeras terminalprogrammet `mrt` som vi kommer använda för att installera paket i vår applikation. När vi vill köra vår server så kommer vi hur som helst använda terminalprogrammet `meteor`.

<% end %>

### Skapa en enkel applikation

Nu när vi har Meteorite installerat, så kan vi skapa en applikation. För att göra detta kommer vi använda Meteorites terminalprogram `mrt`:

~~~bash
$ mrt create microscope
~~~

Detta kommando kommer ladda ner Meteor, och sätta upp ett grundläggande Meteor-projekt som är redo att använda för dig. När det är klart så borde du se en katalog `microscope/`, innehållandes följande filer:

~~~bash
microscope.css
microscope.html
microscope.js
smart.json
~~~

Applikationen som Meteor har skapat för dig är en enkel standard-applikation som demonstrerar ett par enkla mönster.

Även om din applikation inte gör mycket ännu så kan vi ändå köra den. För att köra applikationen gå tillbaka till terminalen och skriv:

~~~bash
$ cd microscope
$ meteor
~~~

Gå nu till din webbläsare och mata in `http://localhost:3000/` (eller motsvarande `http://0.0.0.0:3000/`) där du kommer att se någonting ungefär som detta:

<%= screenshot "2-1", "Meteors Hello World." %>

<%= commit "2-1", "Skapa ett enkelt microscope projekt." %>

Grattis! Du har nu fått igång din första applikation med Meteor. Förresten, allt du behöver göra för att stoppa applikationen är att ta fram terminalfönstret där din applikation körs och trycka på `ctrl+c`.

### Lägg till ett paket

Vi kommer nu använda Meteorite för att lägga till ett smartpaket som låter oss inkludera [Bootstrap](http://getbootstrap.com/) i vårt projekt:

~~~bash
$ mrt add bootstrap
~~~

<%= commit "2-2", "Lade till bootstrap-paketet." %>

<% note do %>

### En notis om paket

När vi talar om paket i kontextet av Meteor, så är det viktigt att vara specifik. Meteor använder fem grundläggande typer av paket:

- Meteor-kärnan är själv uppdelat i flera olika **kärnpaket**. De är inkluderade i varje Meteor-applikation, och du kommer i princip aldrig behöva oroa dig för dessa.
- Meteors **smartpaket** är en grupp av [omkring 37 paket](http://docs.meteor.com/#packages) (du kan se den fulla listan med `meteor list`) som kommer paketerade med Meteor och som du valfritt kan lägga till i din applikation. Du kan även lägga till dem när du inte använder Meteorite, med `meteor add packagename`.
- **Lokala paket** är specialanpassade paket som du kan skapa själv och lägga i mappen `/packages`. Du behöver inte Meteorite för att använda dessa heller.
- **Atmosphere smartpaket** är tredjeparts Meteor-paket som listas på [Atmosphere](https://atmospherejs.com). Meteorite behövs för att importera dessa.
- **NPM-paket** (Node-paketerade moduler) är Node.js paket. Även om de inte fungerar direkt "out of the box" med Meteor, så *kan* dom användas av den föregående typen av paket.

<% end %>

### Filstrukturen i en Meteor-applikation

Innan vi börjar koda, så måste vi sätta upp vårt projekt korrekt. För att försäkra oss att vi har ett rent bygge, öppna upp katalogen 'microscope' och ta bort `microscope.html`, `microscope.js`, och `microscope.css`.

Skapa sedan fem rotkataloger inne i `/microscope`: `/client`, `/server`, `/public`, `/lib`, och `/collections`, och vi kommer också skapa två tomma filer `main.html` och `main.js` inne i `/client`. Oroa dig inte för att detta gör appen tillfälligt obrukbar, vi kommer i nästa kapitel att börja fylla dessa filer.

Vi borde nämna att några av dessa kataloger är speciella. När det kommer till filer, så har Meteor ett par regler:

- Kod i katalogen `/server` körs enbart på servern.
- Kod i katalogen `/client` körs enbart på klienten.
- Allt annat körs på både klienten och servern.
- Filer i `/lib` laddas före allt annat.
- Filer med namnet `main.*` laddas före allt annat.
- Dina statiska filer (fonter, bilder, etc.) läggs i katalogen `/public`.

Notera att även om Meteor har dessa regler så är du inte tvungen att använda någon fördefinerad filstruktur för din applikation, om du inte vill det. Så den filstruktur vi föreslår är bara vårt sätt att göra saker på, inte något som är skrivet i sten.

Vi uppmuntrar dig att kolla in [Meteors officiella dokumentation](http://docs.meteor.com/#structuringyourapp) om du vill ha mer detaljer i ämnet.

<% note do %>

### Är Meteor MVC?

Om du kommer till Meteor från ett annat ramverk såsom t.ex. Ruby on Rails, så kanske du undrar om Meteor anpassar sig till mönstret MVC (Model View Controller).

Det korta svaret är nej. Olikt Rails, så påtvingar inte Meteor dig en fördefinerad struktur på din applikation. I denna boken kommer vi helt enkelt lägga ut koden på det mest tydliga sätt som ger mest förståelse, utan att bry oss för mycket om förkortningar.

<% end %>

### Ingen public?

Okej, vi ljög. Vi behöver faktiskt inte katalogen `public/` av den enkla orsaken att Microscope inte använder några statiska filer. Men sedan de flesta Meteor-applikationer kommer att inkludera åtminstone ett par bilder, så tänkte vi att det var viktigt att täcka även detta.

Förresten, du kanske också har lagt märke till den dolda katalogen `.meteor`. Det är här Meteor lagrar sin egen kod, och att förändra saker där är normalt sett en väldigt dålig idé. Faktum är att du egentligen aldrig behöver kika i den katalogen. Undantaget till det är filerna `.meteor/packages` och `.meteor/release`, vilka används respektive för att lista vilka smartpaket och vilken version som ska användas. När du lägger till paket och ändrar Meteor-version, så kan det vara hjälpsamt att kika i ändringar till dessa filer.

<% note do %>

### Understreck vs CamelCase

Det enda vi kommer säga om den urgamla understreck (`my_variable`) vs camelCase (`myVariable`) debatten är att det spelar ingen roll vilken du väljer så länge du håller dig till en.

I den här boken kommer vi använda camelCase eftersom det är de vanliga sättet att göra saker i JavaScript (det är trots allt JavaScript, inte java_script).

De enda undantagen till denna regel är filnamn, som kommer ha understreck (`my_file.js`), och CSS-klasser, som använder bindestreck (`.my-class`). Orsaken till detta är att understreck är vanligast i filsystemet, samt att CSS syntax använder redan bindestreck (`font-family`, `text-align`, etc.).

<% end %>

### Skötsel av CSS

Denna boken handlar inte om CSS. För att undvika att sakta ner dig med detaljer kring styling så har vi valt att göra hela stilmallen tillgänglig från början, så att du inte ska behöva oroa dig över det.

CSS laddas automatiskt in och blir minifierat av Meteor. Till skillnad från andra statiska filer läggs CSS-filer direkt in i `/client`, inte i `/public`. Gå nu vidare och skapa katalogen `client/stylesheets/`, och placera filen `style.css` där i.

~~~css
.grid-block, .main, .post, .comments li, .comment-form {
    background: #fff;
    border-radius: 3px;
    padding: 10px;
    margin-bottom: 10px;
    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.15);
}
body {
    background: #eee;
    color: #666666;
}
.navbar { margin-bottom: 10px }
.navbar .navbar-inner {
    border-radius: 0px 0px 3px 3px;
}
#spinner { height: 300px }
.post {
    *zoom: 1;
    -webkit-transition: all 300ms 0ms;
    -webkit-transition-delay: ease-in;
    -moz-transition: all 300ms 0ms ease-in;
    -o-transition: all 300ms 0ms ease-in;
    transition: all 300ms 0ms ease-in;
    position: relative;
    opacity: 1;
}
.post:before, .post:after {
    content: "";
    display: table;
}
.post:after { clear: both }
.post.invisible { opacity: 0 }
.post .upvote {
    display: block;
    margin: 7px 12px 0 0;
    float: left;
}
.post .post-content { float: left }
.post .post-content h3 {
    margin: 0;
    line-height: 1.4;
    font-size: 18px;
}
.post .post-content h3 a {
    display: inline-block;
    margin-right: 5px;
}
.post .post-content h3 span {
    font-weight: normal;
    font-size: 14px;
    display: inline-block;
    color: #aaaaaa;
}
.post .post-content p { margin: 0 }
.post .discuss {
    display: block;
    float: right;
    margin-top: 7px;
}
.comments {
    list-style-type: none;
    margin: 0;
}
.comments li h4 {
    font-size: 16px;
    margin: 0;
}
.comments li h4 .date {
    font-size: 12px;
    font-weight: normal;
}
.comments li h4 a { font-size: 12px }
.comments li p:last-child { margin-bottom: 0 }
.dropdown-menu span {
    display: block;
    padding: 3px 20px;
    clear: both;
    line-height: 20px;
    color: #bbb;
    white-space: nowrap;
}
.load-more {
    display: block;
    border-radius: 3px;
    background: rgba(0, 0, 0, 0.05);
    text-align: center;
    height: 60px;
    line-height: 60px;
    margin-bottom: 10px;
}
.load-more:hover {
    text-decoration: none;
    background: rgba(0, 0, 0, 0.1);
}
~~~
<%= caption "client/stylesheets/style.css" %>

<%= commit "2-3","Ändrat i filstrukturen." %>

<% note do %>

### En notis om CoffeeScript

I denna boken kommer vi att skriva i ren JavaScript, men om du föredrar CoffeeScript så har Meteor stöd för det. Lägg helt enkelt till CoffeeScript-paketet så är du redo att köra:

`mrt add coffeescript`

<% end %>
