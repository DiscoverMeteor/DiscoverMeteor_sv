---
title: Driftsättning
slug: deploying
date: 0002/01/02
number: 2.5
sidebar: true
contents: Lära dig hur man driftsätter på Meteor.com.|Lära dig hur man driftsätter på Modulus.|Lära dig hur man driftsätter på din egen server med Meteor Up.
paragraphs: 46
---

Vissa personer gillar att jobba tyst på ett projekt tills det är perfekt, andra kan inte vänta med att visa världen så snart som möjligt.

Om du är den första typen av person och hellre utvecklar lokalt tills vidare, känn dig fri att hoppa över detta kapitel. Men om du å andra sidan gärna tar dig tid och lär dig hur man driftsätter din Meteor applikation online, så har vi det du behöver.

Vi kommer att lära oss hur man driftsätter en applikation på fem olika sätt. Känn dig fri att använda den du känner för oavsett var du är i din utvecklingsprocess, om du jobbar på Microscope eller någon annan Meteor applikation. Så låt oss komma igång!

<% note do %>

### Introduktion av sidofält

Detta är ett **sidofält**-kapitel. Sidofält tar en djupare inblick i mer generella Meteor-ämnen oberoende av resten av boken.

Så om du hellre fortsätter med att bygga Microscope, så kan du tryggt skippa detta tills vidare och komma tillbaka till det senare.

<% end %>

### Driftsättning på Meteor

Driftsättning på en Meteor subdomän (t.ex. `http://myapp.meteor.com`) är det enklaste valet, och kanske det första vi provar. Det kan vara användbart att förevisa din applikation till andra i dess tidiga dagar, eller för att enkelt sätta upp en stageserver.

Driftsättning på Meteor är ganska enkelt. Öppna helt enkelt din terminal, och gå till din Meteor-applikations katalog, och skriv:

~~~bash
$ meteor deploy myapp.meteor.com
~~~

Självklart måste du ta hand om att byta ut "myapp" med ett valfritt namn, föreslagsvis ett som inte redan används. Om detta är din första gång du driftsätter en applikation så kommer du att bli uppmanad om att skapa ett Meteor-konto. Om allt går bra så kommer du inom ett par sekunder kunna komma åt din applikation på `http://myapp.meteor.com`.

För mer information och saker som direkt åtkomst till din hostade instans databas, eller konfigurationen för en anpassad domän för din applikation, så kan du referera till [den officiella dokumentationen](http://docs.meteor.com/#deploying).

### Driftsättning på Modulus

[Modulus](https://modulus.io/) är ett utmärkt alternativ för att driftsätta NodeJS applikationer. Det är en av dom leverantör av PaaS (Platform-som-en-tjänst) som stödjer Meteor, och det finns redan en hel del människor som kör Meteor-applikationer i produktion där.

<% note do %>

### Demeteorizer

Modulus öppna-källkodsverktyg kallas för [demeteorizer](https://github.com/onmodulus/demeteorizer) och kan konvertera din Meteor-applikation till en standard NodeJS-applikation.

<% end %>

Börja med att [skapa ett konto](https://modulus.io/register). För att driftsätta din applikation på Modulus kommer vi behöva installera Modulus terminalprogram.

~~~bash
$ npm install -g modulus
~~~

Och sedan autentisera med:

~~~bash
$ modulus login
~~~

Vi kommer nu att skapa ett Modulus-projekt (notera att du kan också göra detta via Modulus egna instrumentpanel på webben):

~~~bash
$ modulus project create
~~~

Nästa steg så kommer vi att skapa en MongoDB-databas för vår applikation. Vi kan skapa en MongoDB-databas med [Modulus själv](https://modulus.io/codex/database/getting_started), [MongoHQ](https://www.mongohq.com/) eller med någon annan moln-MongoDB-leverantör.

När vi har skapat vår MongoDB-databas så kan hämta sätta `MONGO_URL`:en för den genom Modulus egna webbgränssnitt (gå till Dashboard > Databases > Select your database > Administration), använd den sedan för att konfigurera din applikation såhär:

~~~bash
$ modulus env set MONGO_URL "mongodb://<user>:<pass>@mongo.onmodulus.net:27017/<database_name>"
~~~

Nu är det dags att driftsätta din applikation. Helt enkelt skriver du bara:

~~~bash
$ modulus deploy
~~~

Vi har nu lyckats driftsätta vår applikation på Modulus. Referera gärna till [Modulus dokumentation](https://modulus.io/codex/projects) för mer information om accessloggar, anpassade domänuppsättningar eller SSL.

### Meteor Up

Då det dyker nya molnlösningar varje dag, så kommer dom ofta med deras egna problem och begränsningar. Så från och med idag är driftsättning på en egen server fortfarande det bästa sättet att placera en Meteor-applikation i produktion. Det enda är, att driftsätta själv är inte helt enkelt, speciellt om man letar efter en driftsättning med produktionskvalité.

[Meteor Up](https://github.com/arunoda/meteor-up) (eller kort `mup`) är ett försök till att lösa detta problemet, med ett terminalverktyg som tar hand om uppsättning och driftsättning åt dig. Så låt oss prova att driftsätta Microscope med Meteor Up.

Före något annat behöver vi en server att ladda upp till. Vi rekommenderar antingen [Digital Ocean](http://digitalocean.com), som startar sina abonnemang vid $5 per månad, eller [AWS](http://aws.amazon.com/), som tillhandahåller Micro-instanser gratis (du kommer snabbt stöta på skalningsproblem, men om du bara vill leka runt med Meteor Up så bör detta vara tillräckligt).

Hur som helst vilken tjänst du väljer, så kommer du landa med tre detaljer: din servers IP-adress, ett login (normalt `root` eller `ubuntu`), och ett lösenord. Håll dessa uppgifter nära till hands någonstans, för vi kommer snart behöva dom!

### Initiering av Meteor Up

För att komma igång så behöver vi installera Meteor Up via `npm` med följande:

~~~bash
$ npm install -g mup
~~~

Vi kommer sedan att skapa en speciel, separat katalog som får hålla våra Meteor Up -inställningar för vår särskilda driftsättning. Vi använder en separat katalog för två orsaker: för det första så är det normalt bästa sättet att undvika inkludering i ditt Git repo, speciellt om du jobbar på en publik kodbas.

////

////

~~~bash
$ mkdir ~/microscope-deploy
$ cd ~/microscope-deploy
$ mup init
~~~

<% note do %>

### Dela med Dropbox

////

<% end %>

### Meteor Up Konfiguration

////

////

////

~~~js
{
  //serverns autentiseringsinformation
  "servers": [{
    "host": "hostname",
    "username": "root",
    "password": "password"
    //or pem file (ssh based authentication)
    //"pem": "~/.ssh/id_rsa"
  }],

  //installera MongoDB på servern
  "setupMongo": true,

  //sökväg till applikationen (lokal katalog)
  "app": "/path/to/the/app",

  //konfigurera miljövariabler
  "env": {
    "ROOT_URL": "http://supersite.com"
  }
}
~~~
<%= caption "mup.json" %>

////

**Server Autentisering**

////

////

**MongoDB Konfiguration**

////

////

**Meteor Applikationssökväg**

////

**Miljövariabler**

////

### Uppsättning och driftsättning

////

~~~bash
$ mup setup
~~~

////

~~~bash
$ mup deploy
~~~

////

### Visa Loggar

////

~~~bash
$ mup logs -f
~~~

////

////
